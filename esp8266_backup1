#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <Keypad_I2C.h>
#include <PCF8574.h>
#include <SoftwareSerial.h>
#include <Adafruit_Fingerprint.h>

#define SS_PIN D8
#define RST_PIN D0
#define I2C_ADDR 0x20  // Địa chỉ I2C của PCF8574

#define myRX D4   // TX của AS608 nối vào D4
#define myTX D3   // RX của AS608 nối vào D3

SoftwareSerial mySerial(myRX, myTX);  
Adafruit_Fingerprint finger(&mySerial);

// Keypad 4x4
const byte ROW_NUM    = 4;
const byte COLUMN_NUM = 4;
char keys[ROW_NUM][COLUMN_NUM] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte pin_rows[ROW_NUM] = {0, 1, 2, 3}; 
byte pin_column[COLUMN_NUM] = {4, 5, 6, 7}; 

Keypad_I2C keypad(makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM, I2C_ADDR);

MFRC522 rfid(SS_PIN, RST_PIN);

String allowedUID = "AC C9 37 02"; 
String inputPassword = "";
String storedPassword = "1234";  
int starPressCount = 0;  

void setup() {
  Serial.begin(9600);
  Wire.begin(D2, D1);  // đúng thứ tự I2C
  SPI.begin();
  rfid.PCD_Init();
  keypad.begin();
  finger.begin(57600);
  delay(200);
}

void loop() {
  checkRFID();
  checkFingerprint();
  handleKeypad();
}

// Các hàm:

void checkRFID() {
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    String content = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
      content += String(rfid.uid.uidByte[i] < 0x10 ? "0" : "");
      content += String(rfid.uid.uidByte[i], HEX);
      content += " ";
    }
    content.trim();
    content.toUpperCase();

    if (content == allowedUID) {
      sendDisplay("Hi, welcome home <3");
      Serial.println("ACTION UNLOCK");
      
    } else {
      Serial.println("ACTION DENY");
      sendDisplay("Are you sure you own this house?");
    }
    rfid.PICC_HaltA();
  }
}

void handleKeypad() {
  char key = getKeypadInput();
  if (key) {
    processKeypadInput(key);
  }
}

char getKeypadInput() {
  return keypad.getKey();
}

void processKeypadInput(char key) {
  sendDisplay(String(key));
  Serial.println(key);

  if (key == 'A') {
    starPressCount++;
    if (starPressCount == 3) {
      if (requireRFIDAuth()) {
        changePassword();
      }
      starPressCount = 0;
    }
  }
  else if (key == 'C') {
    checkPassword();
  }
  else if (key == 'D') {
    starPressCount++;
    sendDisplay("Press count: ");
    Serial.println(starPressCount);

    if (starPressCount == 3) {
      if (requireRFIDAuth()) {
        enrollFingerprint();
      }
      starPressCount = 0;
    }
  }
  else if (key == 'B') {
    starPressCount++;
    sendDisplay("Press count: ");
    Serial.println(starPressCount);

    if (starPressCount == 3) {
      if (requireRFIDAuth()) {
        deleteFingerprint();
      }
      starPressCount = 0;
    }
  }
  else {
    inputPassword += key;
    showPasswordMasked(inputPassword.length()); // <-- Hiển thị dấu '*'
  }
}

void showPasswordMasked(int length) {
  String masked = "";
  for (int i = 0; i < length; i++) {
    masked += '*';
  }
  sendDisplay(masked);
}


void checkFingerprint() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return;

  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("ACTION UNLOCK");
    sendDisplay("Hi, welcome home <3");
  } else {
    Serial.println("ACTION DENY");
    sendDisplay("Are you sure you own this house?");
  }
}

void checkPassword() {
  if (inputPassword == storedPassword) {
    Serial.println("ACTION UNLOCK");
    sendDisplay("Hi, welcome home <3");
  } else {
    Serial.println("ACTION DENY");
    sendDisplay("Are you sure you own this house?");
  }
  inputPassword = "";
}

void changePassword() {
  sendDisplay("Enter new password:");
  String newPassword = "";
  unsigned long timeout = millis();

  while (newPassword.length() < 4) {
    char key = keypad.getKey();
    if (key) {
      newPassword += key;
      Serial.print(key);
      timeout = millis();

      sendDisplay(newPassword);  // Hiển thị mật khẩu mới ngay khi nhấn phím
    }

    yield();
    if (millis() - timeout > 10000) {
      sendDisplay("Timeout. Password change canceled.");
      starPressCount = 0;
      return;
    }
  }

  sendDisplay("New password set.");
  storedPassword = newPassword;
  starPressCount = 0;
}

void enrollFingerprint() {
  sendDisplay("=== Enrolling Fingerprint ===");
  uint8_t id;
  bool idExists = true;

  while (idExists) {
    id = random(1, 128);
    if (!finger.loadModel(id)) {
      idExists = false;
    }
  }

  sendDisplay("Using random ID:" +String(id));
  Serial.println(id);

  int p = -1;
  sendDisplay("Place your finger on the sensor...");

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) continue;
    if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("DISPLAY Communication error, retrying...");
      continue;
    }
    if (p == FINGERPRINT_IMAGEFAIL) {
      sendDisplay("Imaging error, retrying...");
      continue;
    }
    yield();
  }

  p = finger.image2Tz(1);
  if (p != FINGERPRINT_OK) {
    sendDisplay("Error processing first image.");
    return;
  }

  sendDisplay("Remove your finger...");
  delay(2000);
  while (finger.getImage() != FINGERPRINT_NOFINGER) {
    yield();
  }

  sendDisplay("Place the same finger again...");
  p = -1;
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) continue;
    if (p == FINGERPRINT_PACKETRECIEVEERR) continue;
    if (p == FINGERPRINT_IMAGEFAIL) continue;
    yield();
  }

  p = finger.image2Tz(2);
  if (p != FINGERPRINT_OK) {
    sendDisplay("Error processing second image.");
    return;
  }

  p = finger.createModel();
  if (p != FINGERPRINT_OK) {
    sendDisplay("Failed to create fingerprint model.");
    return;
  }

  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    sendDisplay("Fingerprint enrolled successfully!");
    sendDisplay("Stored at ID #");
    Serial.println(id);
  } else {
    sendDisplay("Failed to store fingerprint.");
  }
}

void deleteFingerprint() {
  sendDisplay("=== Deleting Fingerprint ===");
  sendDisplay("Place your finger to delete...");
  delay(2000);

  int id = getFingerprintIDez();
  if (id < 0) {
    sendDisplay("Failed to detect finger.");
    return;
  }

  sendDisplay("Detected ID:");
  Serial.println(id);

  uint8_t p = finger.deleteModel(id);
  if (p == FINGERPRINT_OK) {
    sendDisplay("Deleted fingerprint ID #");
    Serial.println(id);
  } else {
    sendDisplay("Failed to delete fingerprint ID #");
    Serial.println(id);
  }
}

int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return -1;

  p = finger.fingerSearch();
  if (p != FINGERPRINT_OK) return -2;

  return finger.fingerID;
}

bool requireRFIDAuth() {
  sendDisplay("Scan Admin RFID");
  unsigned long timeout = millis();
  
  while (millis() - timeout < 10000) {
    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
      String content = "";
      for (byte i = 0; i < rfid.uid.size; i++) {
        content += String(rfid.uid.uidByte[i] < 0x10 ? "0" : "");
        content += String(rfid.uid.uidByte[i], HEX);
        content += " ";
      }
      content.trim();
      content.toUpperCase();
      rfid.PICC_HaltA();

      if (content == allowedUID) {
        sendDisplay("Admin verified!");
        return true;
      } else {
        sendDisplay("Access denied!");
        return false;
      }
    }
    yield();
  }
  sendDisplay("Timeout waiting RFID");
  return false;
}

void sendDisplay(String msg) {
  Serial.print("DISPLAY ");
  Serial.print(msg);
  Serial.print("\n");
}

